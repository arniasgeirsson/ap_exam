#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage[a4paper]{geometry}
\usepackage{fancyhdr}

\pagestyle{fancy}

\fancyhead[LO,LE]{Left}
\fancyhead[CO,CE]{Center}
\fancyhead[RO,RE]{Right}

\usepackage{listings}
\usepackage{color}

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{ %
  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
  basicstyle=\footnotesize,        % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
  breaklines=false,                 % sets automatic line breaking
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  deletekeywords={...},            % if you want to delete keywords from the given language
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
  frame=single,                    % adds a frame around the code
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\color{blue},       % keyword style
  morekeywords={*,...},            % if you want to add more keywords to the set
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=5pt,                   % how far the line-numbers are from the code
  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=1,                    % the step between two line-numbers. If it's 1, each line will be numbered
  stringstyle=\color{mymauve},     % string literal style
  tabsize=2,                       % sets default tabsize to 2 spaces
 % title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
AP Exam 2013
\end_layout

\begin_layout Author
Arni Asgeirsson lwf986
\end_layout

\begin_layout Date
Date?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
- Introduction to this report (what is it about, what is the structure?,
 where are the tests?), the exam and the three questions.
\end_layout

\begin_layout Standard
- What files are being handed in?
\end_layout

\begin_layout Standard
- What is the structure of my src folder?
\end_layout

\begin_layout Standard
- That the handed in code also provides details of my implementations
\end_layout

\begin_layout Standard
- What do I feel is important to show/tell in this report?
\end_layout

\begin_layout Standard
+ How do i generally structure my assessments?
\end_layout

\begin_layout Standard
- Any general assumptions
\end_layout

\begin_layout Standard
- Any errors in the handed out code
\end_layout

\begin_layout Standard
- Where is all the code, and how much of it have I included?
\end_layout

\begin_layout Standard
- Any extra notes or comments
\end_layout

\begin_layout Section
Question 1: The 
\noun on
Salsa
\noun default
 Language
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Initial Comments/Introduction to the question:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I have chosen ReadP beacuse it also allows me to check that if the grammar
 is ambiguous.
 How exactly?
\end_layout

\begin_layout Subsection
Fixing the grammar
\end_layout

\begin_layout Standard
The given grammar is ambiguous and this must be dealt with before proceeding
 with the actual parser.
 The given grammar is as follows and we shall call this G0.
\end_layout

\begin_layout LyX-Code
Program ::= DefComs .
\end_layout

\begin_layout LyX-Code
DefComs ::= DefCom
\end_layout

\begin_layout LyX-Code
    | DefCom DefComs .
\end_layout

\begin_layout LyX-Code
DefCom ::= Command
\end_layout

\begin_layout LyX-Code
    | Definition .
\end_layout

\begin_layout LyX-Code
Definition ::= ’viewdef’ VIdent Expr Expr
\end_layout

\begin_layout LyX-Code
    | ’rectangle’ SIdent Expr Expr Expr Expr Colour
\end_layout

\begin_layout LyX-Code
    | ’circle’ SIdent Expr Expr Expr Colour
\end_layout

\begin_layout LyX-Code
    | ’view’ VIdent
\end_layout

\begin_layout LyX-Code
    | ’group’ VIdent ’[’ VIdents ’]’ .
\end_layout

\begin_layout LyX-Code
Command ::= SIdents ’->’ Pos
\end_layout

\begin_layout LyX-Code
    | Command ’@’ VIdent
\end_layout

\begin_layout LyX-Code
    | Command ’||’ Command
\end_layout

\begin_layout LyX-Code
    | ’{’ Command ’}’ .
\end_layout

\begin_layout LyX-Code
VIdents ::= VIdent
\end_layout

\begin_layout LyX-Code
    | VIdent VIdents .
\end_layout

\begin_layout LyX-Code
SIdents ::= SIdent
\end_layout

\begin_layout LyX-Code
    | SIdent SIdents .
\end_layout

\begin_layout LyX-Code
Pos ::= ’(’ Expr ’,’ Expr ’)’
\end_layout

\begin_layout LyX-Code
    | ’+’ ’(’ Expr ’,’ Expr ’)’ .
\end_layout

\begin_layout LyX-Code
Expr ::= Prim
\end_layout

\begin_layout LyX-Code
    | Expr ’+’ Prim
\end_layout

\begin_layout LyX-Code
    | Expr ’-’ Prim .
\end_layout

\begin_layout LyX-Code
Prim ::= integer
\end_layout

\begin_layout LyX-Code
    | SIdent ’.’ ’x’
\end_layout

\begin_layout LyX-Code
    | SIdent ’.’ ’y’
\end_layout

\begin_layout LyX-Code
    | ’(’ Expr ’)’ .
\end_layout

\begin_layout LyX-Code
Colour ::= ’blue’ | ’plum’ | ’red’ | ’green’ | ’orange’ .
\end_layout

\begin_layout Subsubsection
Precedence and Associativity
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
- What is what?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is assumed that the four operators +, -, @ and || all are left-associative.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Remove @ ? Wait for discu..
 answer.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
- What has precedence?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I assume that + and - have the same precedence, and as the assignment text
 specifies then @ has higher precedence than ||, meaning that if we have
 the following pseudo input 
\begin_inset Quotes eld
\end_inset

cmd || cmd @ Vident
\begin_inset Quotes erd
\end_inset

 then this corresponds to the input 
\begin_inset Quotes eld
\end_inset

cmd || ( cmd @ Vident )
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
I further assume that .
 has higher precedence than + and - meaning that 
\begin_inset Quotes eld
\end_inset

r .
 x + c .
 y
\begin_inset Quotes erd
\end_inset

 is the same as 
\begin_inset Quotes eld
\end_inset

(r .
 x) + (c .
 y)
\begin_inset Quotes erd
\end_inset

.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Needed to assume this?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
- Do we need to fix it here in the grammar? Is that even possible? No, but
 we could help it, although the case is very small and might as well fix
 it by using the operators of ReadP ?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The associativity is already in place and the precedence of +, - and .
 is also already supported by the current grammar.
 What is missing is that @ and || have the correct precedence.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
How do we then ensure this?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To do so we followed a simple algorithm:
\end_layout

\begin_layout LyX-Code
A ::= A a1 A
\end_layout

\begin_layout LyX-Code
    | A a2 A
\end_layout

\begin_layout LyX-Code
    | a3 .
\end_layout

\begin_layout LyX-Code
->
\end_layout

\begin_layout LyX-Code
A ::= A a1 B
\end_layout

\begin_layout LyX-Code
    | B .
\end_layout

\begin_layout LyX-Code
B ::= B a2 C
\end_layout

\begin_layout LyX-Code
    | C .
\end_layout

\begin_layout LyX-Code
C ::= a3 .
\end_layout

\begin_layout Standard
where a1 & a2 are terminals, a3 is something 'else'
\begin_inset Note Note
status open

\begin_layout Plain Layout
Skriv mere prof
\end_layout

\end_inset

 and A,B,C are non-terminals.
 Now a2 will have higher precedence than a1.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Reference G0 somewhere.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following is the resulting grammar and we shall call this G1
\end_layout

\begin_layout LyX-Code
Program ::= DefComs .
\end_layout

\begin_layout LyX-Code
DefComs ::= DefCom
\end_layout

\begin_layout LyX-Code
    | DefCom DefComs .
\end_layout

\begin_layout LyX-Code
DefCom ::= Command
\end_layout

\begin_layout LyX-Code
    | Definition .
\end_layout

\begin_layout LyX-Code
Definition ::= ’viewdef’ VIdent Expr Expr
\end_layout

\begin_layout LyX-Code
    | ’rectangle’ SIdent Expr Expr Expr Expr Colour
\end_layout

\begin_layout LyX-Code
    | ’circle’ SIdent Expr Expr Expr Colour
\end_layout

\begin_layout LyX-Code
    | ’view’ VIdent
\end_layout

\begin_layout LyX-Code
    | ’group’ VIdent ’[’ VIdents ’]’ .
\end_layout

\begin_layout LyX-Code
Command ::= Command ’||’ Command2
\end_layout

\begin_layout LyX-Code
    | Command2 .
\end_layout

\begin_layout LyX-Code
Command2 ::= Command2 ’@’ VIdent
\end_layout

\begin_layout LyX-Code
    | Command3 .
\end_layout

\begin_layout LyX-Code
Command3 ::= SIdents ’->’ Pos
\end_layout

\begin_layout LyX-Code
    | ’{’ Command ’}’ .
\end_layout

\begin_layout LyX-Code
VIdents ::= VIdent
\end_layout

\begin_layout LyX-Code
    | VIdent VIdents .
\end_layout

\begin_layout LyX-Code
SIdents ::= SIdent
\end_layout

\begin_layout LyX-Code
    | SIdent SIdents .
\end_layout

\begin_layout LyX-Code
Pos ::= ’(’ Expr ’,’ Expr ’)’
\end_layout

\begin_layout LyX-Code
    | ’+’ ’(’ Expr ’,’ Expr ’)’ .
\end_layout

\begin_layout LyX-Code
Expr ::= Prim
\end_layout

\begin_layout LyX-Code
    | Expr ’+’ Prim
\end_layout

\begin_layout LyX-Code
    | Expr ’-’ Prim .
\end_layout

\begin_layout LyX-Code
Prim ::= integer
\end_layout

\begin_layout LyX-Code
    | SIdent ’.’ ’x’
\end_layout

\begin_layout LyX-Code
    | SIdent ’.’ ’y’
\end_layout

\begin_layout LyX-Code
    | ’(’ Expr ’)’ .
\end_layout

\begin_layout LyX-Code
Colour ::= ’blue’ | ’plum’ | ’red’ | ’green’ | ’orange’ .
\end_layout

\begin_layout Subsubsection
Left factorization
\end_layout

\begin_layout Standard
We can see that G1 contains the case of left factorization problem.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Rephrase!!
\end_layout

\end_inset

 We therefore start by fixing this by doing left factorization on G1.
\end_layout

\begin_layout Standard
I have summarized how I do left factorization in the following algorithm:
\end_layout

\begin_layout LyX-Code
A ::= B a1
\end_layout

\begin_layout LyX-Code
    | B a2.
\end_layout

\begin_layout LyX-Code
->
\end_layout

\begin_layout LyX-Code
A ::= B A' .
\end_layout

\begin_layout LyX-Code
A'::= a1
\end_layout

\begin_layout LyX-Code
    | a2 .
\begin_inset Note Note
status open

\begin_layout Plain Layout
note that if any of the prev a1-an is nothing, then A' should also have
 epsilon e clause 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where A, As' and B are non-terminals and a1 & a2 are something else.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Skriv det ordenligt!!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The resulting grammar is as follows and this shall be called G2.
\end_layout

\begin_layout LyX-Code
Program ::= DefComs .
\end_layout

\begin_layout LyX-Code
DefComs ::= DefCom DefComs' .
\end_layout

\begin_layout LyX-Code
DefComs' ::= DefComs
\end_layout

\begin_layout LyX-Code
    | e .
\end_layout

\begin_layout LyX-Code
DefCom ::= Command
\end_layout

\begin_layout LyX-Code
    | Definition .
\end_layout

\begin_layout LyX-Code
Definition ::= ’viewdef’ VIdent Expr Expr
\end_layout

\begin_layout LyX-Code
    | ’rectangle’ SIdent Expr Expr Expr Expr Colour
\end_layout

\begin_layout LyX-Code
    | ’circle’ SIdent Expr Expr Expr Colour
\end_layout

\begin_layout LyX-Code
    | ’view’ VIdent
\end_layout

\begin_layout LyX-Code
    | ’group’ VIdent ’[’ VIdents ’]’ .
\end_layout

\begin_layout LyX-Code
Command ::= Command ’||’ Command2
\end_layout

\begin_layout LyX-Code
    | Command2 .
\end_layout

\begin_layout LyX-Code
Command2 ::= Command2 ’@’ VIdent
\end_layout

\begin_layout LyX-Code
    | Command3 .
\end_layout

\begin_layout LyX-Code
Command3 ::= SIdents ’->’ Pos
\end_layout

\begin_layout LyX-Code
    | ’{’ Command ’}’ .
\end_layout

\begin_layout LyX-Code
VIdents ::= VIdent VIdents' .
\end_layout

\begin_layout LyX-Code
VIdents' ::= VIdents
\end_layout

\begin_layout LyX-Code
    | e .
\end_layout

\begin_layout LyX-Code
SIdents ::= SIdent SIdents' .
\end_layout

\begin_layout LyX-Code
SIdents' ::= SIdents
\end_layout

\begin_layout LyX-Code
    | e.
\end_layout

\begin_layout LyX-Code
Pos ::= ’(’ Expr ’,’ Expr ’)’
\end_layout

\begin_layout LyX-Code
    | ’+’ ’(’ Expr ’,’ Expr ’)’ .
\end_layout

\begin_layout LyX-Code
Expr ::= Prim
\end_layout

\begin_layout LyX-Code
    | Expr Rest2 .
\end_layout

\begin_layout LyX-Code
Rest2 :: = ’+’ Prim
\end_layout

\begin_layout LyX-Code
    | ’-’ Prim .
\end_layout

\begin_layout LyX-Code
Prim ::= integer
\end_layout

\begin_layout LyX-Code
    | ’(’ Expr ’)’
\end_layout

\begin_layout LyX-Code
    | SIdent ’.’ Rest3 .
\end_layout

\begin_layout LyX-Code
Rest3 ::= ’x’
\end_layout

\begin_layout LyX-Code
    | ’y’ .
\end_layout

\begin_layout LyX-Code
Colour ::= ’blue’ | ’plum’ | ’red’ | ’green’ | ’orange’ .
\end_layout

\begin_layout Subsubsection
Left recursion
\end_layout

\begin_layout Standard
When we look at G2 we can quickly see that there is a few cases of direct
 left-recursion.
 The next is I take is therefore to remove left-recursion from our current
 grammar G2, with the following algorithm:
\end_layout

\begin_layout LyX-Code
A ::= A a1
\end_layout

\begin_layout LyX-Code
    | b1 .
\end_layout

\begin_layout LyX-Code
->
\end_layout

\begin_layout LyX-Code
A ::= b1 A' .
\end_layout

\begin_layout LyX-Code
A'::= a1 A'
\end_layout

\begin_layout LyX-Code
    | e .
\end_layout

\begin_layout Standard
where A and A' are non-terminals and a1 & b1 are 
\begin_inset Note Note
status open

\begin_layout Plain Layout
what?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When applying the procedure/algorithm on G2 we get the grammar G3 which
 is shown below:
\end_layout

\begin_layout LyX-Code
Program ::= DefComs .
\end_layout

\begin_layout LyX-Code
DefComs ::= DefCom DefComs' .
\end_layout

\begin_layout LyX-Code
DefComs' ::= DefComs
\end_layout

\begin_layout LyX-Code
    | e .
\end_layout

\begin_layout LyX-Code
DefCom ::= Command
\end_layout

\begin_layout LyX-Code
    | Definition .
\end_layout

\begin_layout LyX-Code
Definition ::= ’viewdef’ VIdent Expr Expr
\end_layout

\begin_layout LyX-Code
    | ’rectangle’ SIdent Expr Expr Expr Expr Colour
\end_layout

\begin_layout LyX-Code
    | ’circle’ SIdent Expr Expr Expr Colour
\end_layout

\begin_layout LyX-Code
    | ’view’ VIdent
\end_layout

\begin_layout LyX-Code
    | ’group’ VIdent ’[’ VIdents ’]’ .
\end_layout

\begin_layout LyX-Code
Command ::= Command2 Command' .
\end_layout

\begin_layout LyX-Code
Command' ::= ’||’ Command2 Command'
\end_layout

\begin_layout LyX-Code
    | e .
\end_layout

\begin_layout LyX-Code
Command2 ::= Command3 Command2' .
\end_layout

\begin_layout LyX-Code
Command2' ::= ’@’ VIdent Command2'
\end_layout

\begin_layout LyX-Code
    | e .
\end_layout

\begin_layout LyX-Code
Command3 ::= SIdents ’->’ Pos
\end_layout

\begin_layout LyX-Code
    | ’{’ Command ’}’ .
\end_layout

\begin_layout LyX-Code
VIdents ::= VIdent VIdents' .
\end_layout

\begin_layout LyX-Code
VIdents' ::= VIdents
\end_layout

\begin_layout LyX-Code
    | e .
\end_layout

\begin_layout LyX-Code
SIdents ::= SIdent SIdents' .
\end_layout

\begin_layout LyX-Code
SIdents' ::= SIdents
\end_layout

\begin_layout LyX-Code
    | e.
\end_layout

\begin_layout LyX-Code
Pos ::= ’(’ Expr ’,’ Expr ’)’
\end_layout

\begin_layout LyX-Code
    | ’+’ ’(’ Expr ’,’ Expr ’)’ .
\end_layout

\begin_layout LyX-Code
Expr ::= Prim Expr' .
\end_layout

\begin_layout LyX-Code
Expr' ::= Rest2 Expr'
\end_layout

\begin_layout LyX-Code
    | e .
\end_layout

\begin_layout LyX-Code
Rest2 :: = ’+’ Prim
\end_layout

\begin_layout LyX-Code
    | ’-’ Prim .
\end_layout

\begin_layout LyX-Code
Prim ::= integer
\end_layout

\begin_layout LyX-Code
    | ’(’ Expr ’)’
\end_layout

\begin_layout LyX-Code
    | SIdent Rest3 .
\end_layout

\begin_layout LyX-Code
Rest3 ::= ’.’ ’x’
\end_layout

\begin_layout LyX-Code
    | ’.’ ’y’ .
\end_layout

\begin_layout LyX-Code
Colour ::= ’blue’ | ’plum’ | ’red’ | ’green’ | ’orange’ .
\end_layout

\begin_layout Subsection
Assumptions on the grammar
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
- Define 'integer'
\end_layout

\begin_layout Plain Layout
- Define 'VIdent'
\end_layout

\begin_layout Plain Layout
- Define 'SIdent'
\end_layout

\begin_layout Plain Layout
- Define white spaces
\end_layout

\begin_layout Plain Layout
- Define reserved words
\end_layout

\begin_layout Plain Layout
- Define color names
\end_layout

\begin_layout Plain Layout
- Does this mean 0 or more V 1 or more 
\begin_inset Quotes eld
\end_inset

symbolic tokens are separated by arbitrary whitespace.
\begin_inset Quotes erd
\end_inset

, page 4 - bottom.
\end_layout

\begin_layout Plain Layout
anymore?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Some of the non-terminals in the grammar is not specified in the grammar,
 but partly in the assignment text.
 I will therefore 
\begin_inset Note Note
status open

\begin_layout Plain Layout
..
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Case sensitivity
\end_layout

\begin_layout Standard
I assume that Samba is case sensitive.
 (This should be given from all definition of 
\emph on
VIdent
\emph default
 and 
\emph on
SIdent
\emph default
)
\end_layout

\begin_layout Subsubsection
integer
\end_layout

\begin_layout Standard
Is a non-negative integer number and can therefore be written with the following
 regular expression: 
\end_layout

\begin_layout Standard
[0-9]+
\begin_inset Note Note
status open

\begin_layout Plain Layout
Double check! Make math?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
VIdent
\end_layout

\begin_layout Standard
As the assignment text specifies then 
\emph on
VIdent
\emph default
 is a nonempty sequence of letters, digits and underscore, which starts
 with a uppercase letter and can therefore be written with the following
 regular expression:
\end_layout

\begin_layout Standard
['A'-'Z']+['A'-'Z''a'-'z'0-9_]*
\begin_inset Note Note
status open

\begin_layout Plain Layout
Double check! Make math?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
SIdent
\end_layout

\begin_layout Standard

\emph on
SIdent
\emph default
 is the same as a 
\emph on
VIdent
\emph default
 except it cannot be one of the reserved words, described below, and has
 to start with a lowercase letter, which can be described as:
\end_layout

\begin_layout Standard
['a'-'z']+['A'-'Z''a'-'z'0-9_]*
\begin_inset Note Note
status open

\begin_layout Plain Layout
Double check! Make math?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
White spaces
\end_layout

\begin_layout Standard
Whitespaces are what most would expect, spaces, any tabs, newlines and unicode
 spaces
\begin_inset Note Note
status open

\begin_layout Plain Layout
What is unicode spaces, do they belong here?
\end_layout

\end_inset

.
 As I am using ReadP I will let the the function skipSpaces
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Link to documentation
\end_layout

\end_inset

 define the exact representation of white spaces.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
The reserved words, color names, 
\emph on
VIdent
\emph default
, and 
\emph on
SIdent
\emph default
 are separated by at least one white space of any kind.
 Symbolic tokens are separated by 0 or more white spaces and so are symbolic
 tokens and alpha-numeric tokens from each other.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Rephrase?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Reserved Words
\end_layout

\begin_layout Standard
The reserved words are: 'viewdef', 'rectangle', 'circle', 'group' and 'view'.
\end_layout

\begin_layout Subsubsection
Color Names
\end_layout

\begin_layout Standard
The names of the color are also considered to be reserved words and are
 the following: 'blue', 'plum', 'red', 'green' and 'orange'.
\end_layout

\begin_layout Subsection
The Code
\end_layout

\begin_layout Subsubsection
Interface functions
\end_layout

\begin_layout Paragraph
parseString :: String -> Either Error Program
\end_layout

\begin_layout Paragraph
parseFile :: FilePath -> IO (Either Error Program)
\end_layout

\begin_layout Subsubsection
Implementation functions
\end_layout

\begin_layout Subsubsection
Helper functions
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
When is a function a helper function and not a implementation function?
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tests?
\end_layout

\begin_layout Section
Question 2: Interpreting 
\noun on
Salsa
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Initial Comments/Introduction to the question:
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Any assumptions
\end_layout

\begin_layout Standard
- How the coordinate system is defined, see page 8 - top.
\end_layout

\begin_layout Standard
- The position of the different shapes, i.e.
 their anchor points/pivot points.
\end_layout

\begin_layout Standard
- 
\begin_inset Quotes eld
\end_inset

All of these can be checked statically prior to executing the Salsa program,
 hence you don’t have to worry about proper error handling in this question.
 If you encounter an error, you should halt the interpreter by calling the
 built-in Haskell function error.
 Writing the static check, as a separate pass over the abstract syntax tree,
 is not part of the exam.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Specify what should happen with 
\begin_inset Quotes eld
\end_inset

b -> (0,0) @ A @ B
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The Code
\end_layout

\begin_layout Subsubsection
The Monad(s)
\end_layout

\begin_layout Subsubsection
Interface functions
\end_layout

\begin_layout Subsubsection
Implementation functions
\end_layout

\begin_layout Subsubsection
Helper functions
\end_layout

\begin_layout Subsubsection
Graphics engine functions?
\end_layout

\begin_layout Subsection
Tests?
\end_layout

\begin_layout Section
Question 3: Atomic Transaction Server in Erlang
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Initial Comments/Introduction to the question:
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Any assumptions
\end_layout

\begin_layout Standard
- Define 'atomic transaction'
\end_layout

\begin_layout Subsection
The Code
\end_layout

\begin_layout Subsubsection
The Server API / Interface functions
\end_layout

\begin_layout Subsubsection
Implementation functions
\end_layout

\begin_layout Subsubsection
Helper functions
\end_layout

\begin_layout Subsubsection
Something about the states + state functions?
\end_layout

\begin_layout Subsubsection
The answer to the problem stated at page 13 - top.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Appendix A
\end_layout

\end_body
\end_document
